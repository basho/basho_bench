%% 1st phase: Pre-populate keys so that get operations will fetch something
%%            Use partitioned_sequential_int key gen to guarantee entire
%%            key space is pre-populated.
%% 2nd phase: Use actual model test workload, using desired 'duration' time
%%            and key generator.

{mode, max}.
{duration, 9999}.  % 1st phase: will stop when all key generators are done
%{duration, 10}.   % 2nd phase: run for this many minutes

{concurrent, 1}.   % Change for best fit for each phase

{driver, basho_bench_driver_riakc_pb}.
{test_dir, "./tests"}.   % default output dir

{riakc_pb_ips, [
                %% If more than one, separate each 2-tuple with a comma!
                {"localhost", 8087}
               ]}.

{riakc_pb_bucket, <<"test-demo-bucket2">>}.
%% Note: Using only 99 keys is silly, don't do this for real tests.
{key_generator,
 {concat_binary,
  {base64,
   {int_to_bin,
    {partitioned_sequential_int, 99}
   }
  },
  <<"Filler bytes go here.... -------------------------------------------">>
 }
}.                                                % 1st phase
%{key_generator, {int_to_bin, {pareto_int, 99}}}. % 2nd phase
{value_generator, {fixed_bin, 10000}}.

{riakc_pb_replies, 1}.       % 1st phase
%{riakc_pb_replies, quorum}. % 2nd phase

{operations, [{put, 1}]}.            % 1st phase
%{operations, [{get, 9}, {put, 1}]}. % 2nd phase
